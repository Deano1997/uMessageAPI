using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using NSwag;
using NSwag.SwaggerGeneration.Processors.Security;
using Pomelo.EntityFrameworkCore.MySql.Infrastructure;
using System;
using uMessageAPI.Data;
using uMessageAPI.Models;
using uMessageAPI.Utility;

namespace uMessageAPI.Extensions {
    public static class ServiceExtensions
    {

        public static void ConfigureDbContext(this IServiceCollection services, IConfiguration configuration) {
            // Configure the database context for our web application.
            services.AddDbContextPool<ApplicationDbContext>(options => {
                // Get the default database connection string.
                var defaultConnectionString = configuration.GetConnectionString("DefaultConnection");

                Console.Out.WriteLine(defaultConnectionString);
            options.UseSqlServer(configuration.GetConnectionString("DefaultConnection"));
            // Configure the MySql to use the given connection string.
           // options.UseMySql(defaultConnectionString, mysqlOptions => {
                    // Configure the MySql being used so that
                   // mysqlOptions.ServerVersion(new Version(5, 7), ServerType.MySql);
              //  });
            });
        }

        public static void ConfigureIdentity(this IServiceCollection services, IConfiguration configuration) {
            // Configure the identity system being used by our web application.
            services
                .AddIdentityCore<User>(options => {
                    // Configure user settings.
                    options.User.AllowedUserNameCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._@+";
                    options.User.RequireUniqueEmail = true;

                    // Configure password settings.
                    options.Password.RequireDigit = true;
                    options.Password.RequireLowercase = true;
                    options.Password.RequireNonAlphanumeric = true;
                    options.Password.RequireUppercase = true;
                    options.Password.RequiredLength = 6;
                    options.Password.RequiredUniqueChars = 1;

                    // Configure lockout settings.
                    options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(5);
                    options.Lockout.MaxFailedAccessAttempts = 5;
                    options.Lockout.AllowedForNewUsers = true;
                })
                .AddEntityFrameworkStores<ApplicationDbContext>()
                .AddSignInManager<SignInManager<User>>();
        }

        public static void ConfigureAuthentication(this IServiceCollection services, IConfiguration configuration) {
            // Configure the authentication service.
            services
                // Add support for authentication using JWT bearer based on the default
                // JWT authentication scheme.
                .AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                // Configure the JWT bearer authentication which is used for our API endpoints.
                .AddJwtBearer(options => {
                    // Ensure only valid tokens are allowed if generated by our web application.
                    options.SaveToken = true;
                    // Configure the token validation parameters which should be used when our web application
                    // received an authorization bearer token.
                    options.TokenValidationParameters = JwtTokenHelper.CreateTokenValidationParameters(configuration);
                });
        }

        public static void ConfigureCors(this IServiceCollection services, IConfiguration configuration) {
            // Add a CORS services to be used by our web application.
            services.AddCors(options => {
                // Our API backend will be used by a web application hosted on a different origin.
                // Therefor we need to define a CORS policy which allows our resources to be used
                // on an origin different from ours.
                options.AddPolicy("CorsPolicy", builder => builder
                    // We do not list "credentials" as our web application does not use cookies but
                    // instead requires JWT tokens to be passed to identify a user.
                    .AllowCredentials()
                    .SetIsOriginAllowed(host => true)
                    .WithMethods("GET", "POST", "PUT", "DELETE")
                    .WithHeaders("Accept", "Authorization", "Content-Type", "Origin", "X-Requested-With")
                );
            });
        }
    
        public static void ConfigureOpenApiDocument(this IServiceCollection services, IConfiguration configuration) {
            // Configure the Open API Document.
            services.AddOpenApiDocument(options => {
                options.DocumentName = "apidocs";
                options.Title = "uMessage API";
                options.Description = "The uMessage API endpoint documentation.";
                options.Version = "v1";
                options.DocumentProcessors.Add(new SecurityDefinitionAppender("JWT Token", new SwaggerSecurityScheme {
                    Type = SwaggerSecuritySchemeType.ApiKey,
                    Name = "Authorization",
                    Description = "Copy 'Bearer ' + valid JWT token into field",
                    In = SwaggerSecurityApiKeyLocation.Header
                }));
            });
        }

    }
}